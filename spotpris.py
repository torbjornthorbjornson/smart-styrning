#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Policy: Tider i databasen √§r UTC-naiva (DATETIME utan tz).
All dygnslogik g√∂rs i Europe/Stockholm.
In/ut:
  - API -> lokal SE (aware) -> UTC (aware) -> ta bort tz (naiv) -> DB
  - L√§sning/visning -> UTC (naiv) -> g√∂r aware (UTC) -> konvertera till SE
"""

import os, sys, json, logging, argparse, requests, pymysql
from datetime import datetime, date, time as dtime, timedelta
import pytz
import configparser
from typing import Tuple, List, Dict

# ======= KONFIG =======
LOG_INFO = os.getenv("SPOTPRIS_LOG_INFO", "/home/runerova/smartweb/spotpris_info.log")
LOG_ERR  = os.getenv("SPOTPRIS_LOG_ERR",  "/home/runerova/smartweb/spotpris_error.log")
PRICE_ZONE = os.getenv("PRICE_ZONE", "SE3")   # SE1..SE4
API_BASE = "https://www.elprisetjustnu.se/api/v1/prices"
# ======================

# ===== Logging =====
os.makedirs(os.path.dirname(LOG_INFO), exist_ok=True)
logging.basicConfig(
    filename=LOG_INFO,
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)
err_handler = logging.FileHandler(LOG_ERR)
err_handler.setLevel(logging.ERROR)
err_handler.setFormatter(logging.Formatter("%(asctime)s [%(levelname)s] %(message)s"))
logging.getLogger().addHandler(err_handler)
log = logging.getLogger("spotpris")

# ===== Tidszoner =====
STHLM = pytz.timezone("Europe/Stockholm")
UTC   = pytz.UTC

# ===== DB-config via ~/.my.cnf =====
def read_db_config() -> Dict:
    cfg = configparser.ConfigParser()
    cfg.read('/home/runerova/.my.cnf')
    return {
        'host': 'localhost',
        'user': cfg['client']['user'],
        'password': cfg['client']['password'],
        'database': 'smart_styrning',
        'charset': 'utf8mb4',
        'cursorclass': pymysql.cursors.DictCursor,
        'autocommit': False,
    }

DB = read_db_config()

# ===== Hj√§lpfunktioner =====
def local_day_window_utc(local_day: date) -> Tuple[datetime, datetime]:
    """[lokal 00:00, 24:00) -> UTC-naiva gr√§nser f√∂r DB-s√∂kning."""
    start_local = STHLM.localize(datetime.combine(local_day, dtime(0,0)))
    end_local   = start_local + timedelta(days=1)
    return (start_local.astimezone(UTC).replace(tzinfo=None),
            end_local.astimezone(UTC).replace(tzinfo=None))

def is_dst(now_local: datetime) -> bool:
    """Sant om lokal aware-tid ligger i sommartid."""
    return bool(now_local.dst())

def choose_target_day(now_local: datetime) -> Tuple[date, str]:
    """
    Nord Pool / EPJN publicerar ~13 CET / ~14 CEST.
    Efter tr√∂skeln siktar vi p√• imorgon.
    """
    today = now_local.date()
    threshold_hour = 14 if is_dst(now_local) else 13
    if now_local.hour >= threshold_hour:
        return today + timedelta(days=1), "tomorrow"
    return today, "today"

def count_rows_for_window(utc_start: datetime, utc_end: datetime) -> int:
    with pymysql.connect(**DB) as conn, conn.cursor() as cur:
        cur.execute("""
            SELECT COUNT(*) AS n
            FROM electricity_prices
            WHERE datetime >= %s AND datetime < %s
        """, (utc_start, utc_end))
        return cur.fetchone()["n"]

def url_for(day_local: date) -> str:
    # https://www.elprisetjustnu.se/api/v1/prices/YYYY/MM-DD_SE3.json
    return f"{API_BASE}/{day_local:%Y}/{day_local:%m-%d}_{PRICE_ZONE}.json"

def fetch_prices(day_local: date) -> List[Dict]:
    url = url_for(day_local)
    log.info("üîé H√§mtar priser: %s", url)
    try:
        r = requests.get(url, timeout=20)
        if r.status_code == 404:
            log.info("‚ùå Inga priser publicerade f√∂r %s √§nnu (404).", day_local)
            return []
        r.raise_for_status()
        data = r.json()
        log.info("‚úÖ H√§mtat %d rader f√∂r %s (ex: %s ...)", len(data), day_local, json.dumps(data[:2], ensure_ascii=False))
        return data
    except Exception as e:
        log.error("Fel vid h√§mtning: %s", e)
        return []

def upsert_prices(data: List[Dict], target_day_local: date) -> Tuple[int,int,int]:
    """
    Upsert alla rader som tillh√∂r target_day_local (tolkat i svensk tid).
    Returnerar (inserted, updated, skipped_for_other_day).
    """
    ins = upd = skip_other = 0
    if not data:
        return (0,0,0)

    with pymysql.connect(**DB) as conn, conn.cursor() as cur:
        # (P√•verkar TIMESTAMP, inte DATETIME, men bra hygiene)
        cur.execute("SET time_zone = '+00:00'")
        for row in data:
            ts_str = row.get("time_start")
            if not ts_str:
                continue

            # Ex: '2025-08-30T00:00:00+02:00'
            ts = datetime.fromisoformat(ts_str)  # hanterar ¬±HH:MM
            ts_local = (STHLM.localize(ts) if ts.tzinfo is None else ts.astimezone(STHLM))

            # Filtrera p√• den lokala dagen
            if ts_local.date() != target_day_local:
                skip_other += 1
                continue

            price = float(row["SEK_per_kWh"])
            ts_utc_naive = ts_local.astimezone(UTC).replace(tzinfo=None)

            cur.execute("""
                INSERT INTO electricity_prices (datetime, price)
                VALUES (%s, %s)
                ON DUPLICATE KEY UPDATE
                    price = VALUES(price)
            """, (ts_utc_naive, price))

            # rowcount: 1 = insert, 2 = update (i denna upsert), 0 = unchanged
            if cur.rowcount == 1:
                ins += 1
                log.info("üíæ Insert: %sZ => %.5f", ts_utc_naive, price)
            elif cur.rowcount == 2:
                upd += 1
                log.info("‚ôªÔ∏è Update: %sZ => %.5f", ts_utc_naive, price)

        conn.commit()

    return (ins, upd, skip_other)

def verify_local_hour_coverage(local_day: date) -> List[int]:
    """
    Logga vilka lokala timmar (0..23) som finns i DB f√∂r local_day.
    Returnerar en lista med saknade timmar (kan vara tom).
    """
    utc_start, utc_end = local_day_window_utc(local_day)
    hours_present = set()
    rows = []

    with pymysql.connect(**DB) as conn, conn.cursor() as cur:
        cur.execute("""
            SELECT datetime, price
            FROM electricity_prices
            WHERE datetime >= %s AND datetime < %s
            ORDER BY datetime
        """, (utc_start, utc_end))
        rows = cur.fetchall()

    for r in rows:
        # DB har UTC-naiv -> g√∂r aware i UTC och konvertera till SE
        dt_loc = UTC.localize(r["datetime"]).astimezone(STHLM)
        hours_present.add(dt_loc.hour)

    missing = [h for h in range(24) if h not in hours_present]
    if missing:
        log.warning("üß≠ Lokala timmar saknas f√∂r %s: %s", local_day, missing)
    else:
        log.info("üß≠ Alla 24 lokala timmar finns f√∂r %s.", local_day)
    return missing

# ===== Huvudfl√∂de =====
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--datum", help="YYYY-MM-DD (tvinga viss lokal dag; normalt beh√∂vs inte)")
    parser.add_argument("--zone",  default=PRICE_ZONE, help="Prisomr√•de, t.ex. SE1..SE4 (default fr√•n env PRICE_ZONE)")
    args = parser.parse_args()

    # ev. √∂verstyr prisomr√•de fr√•n CLI
    global PRICE_ZONE
    PRICE_ZONE = args.zone

    now_local = datetime.now(STHLM)
    log.info("==> spotpris.py start (%s) | zone=%s", now_local.strftime("%Y-%m-%d %H:%M"), PRICE_ZONE)

    if args.datum:
        try:
            target_day_local = datetime.strptime(args.datum, "%Y-%m-%d").date()
            label = "forced"
        except ValueError:
            log.error("‚ùå Ogiltigt datumformat. Anv√§nd YYYY-MM-DD.")
            return 1
    else:
        target_day_local, label = choose_target_day(now_local)

    utc_start, utc_end = local_day_window_utc(target_day_local)
    have_before = count_rows_for_window(utc_start, utc_end)
    log.info("üéØ M√•l-dag: %s (%s) | Rader i DB f√∂re: %d", target_day_local, label, have_before)

    data = fetch_prices(target_day_local)
    ins, upd, skip_other = upsert_prices(data, target_day_local)

    have_after = count_rows_for_window(utc_start, utc_end)
    log.info("üìä Resultat: inserted=%d, updated=%d, skip_other_day=%d | Rader i DB efter: %d",
             ins, upd, skip_other, have_after)

    # Verifiera lokala timmar (hj√§lper vid fels√∂kning av 00‚Äì01)
    missing = verify_local_hour_coverage(target_day_local)

    # Komplett f√∂r dagen (23/24/25 beroende p√• DST) -> klart
    if have_after in (23, 24, 25) and not missing:
        log.info("‚úÖ %s komplett (%d rader) och alla lokala timmar finns.", target_day_local, have_after)
        log.info("==> spotpris.py klar")
        return 0

    # Om vi siktade p√• imorgon och det saknas -> v√§nta till n√§sta k√∂rning (ingen fallback).
    if label == "tomorrow":
        log.warning("‚è≥ Imorgon ej komplett √§nnu (%d/24). V√§ntar till n√§sta k√∂rning.", have_after)
        log.info("==> spotpris.py klar")
        return 0

    # Om vi siktade p√• idag och det saknas mycket: g√∂r ett extra f√∂rs√∂k (idempotent).
    if have_after < 23:
        log.warning("‚ö†Ô∏è Dagens data ofullst√§ndiga (%d/24). F√∂rs√∂ker en g√•ng till.", have_after)
        data2 = fetch_prices(now_local.date())
        ins2, upd2, skip2 = upsert_prices(data2, now_local.date())
        have_final = count_rows_for_window(*local_day_window_utc(now_local.date()))
        log.info("üìà Efter retry: inserted=%d, updated=%d | Rader i DB: %d", ins2, upd2, have_final)
        verify_local_hour_coverage(now_local.date())

    log.info("==> spotpris.py klar")
    return 0

if __name__ == "__main__":
    try:
        sys.exit(main())
    except Exception as e:
        log.exception("Kritiskt fel: %s", e)
        sys.exit(1)
